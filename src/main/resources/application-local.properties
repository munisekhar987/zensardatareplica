# Enhanced CDC Consumer Application Configuration - LOCAL ENVIRONMENT
# Architecture: Consumer(1) ? Hashers(4) ? Workers(16) ? Connection Pool

# Server Configuration
server.port=9095
spring.application.name=Enhanced-CDC-Architecture-Local

# CRITICAL: Keep application running continuously
spring.main.keep-alive=true
spring.main.web-application-type=servlet

# ================================
# LOCAL KAFKA CONFIGURATION
# ================================
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Enhanced Kafka Consumer Configuration
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-commit-interval=250
spring.kafka.consumer.max-poll-records=500
spring.kafka.consumer.session-timeout-ms=300000
spring.kafka.consumer.heartbeat-interval-ms=10000
spring.kafka.consumer.fetch-min-size=1024
spring.kafka.consumer.fetch-max-wait=1000

# No security for local Kafka
# spring.kafka.properties.security.protocol=PLAINTEXT
# Local Kafka - NO SECURITY (PLAINTEXT)
spring.kafka.properties.security.protocol=PLAINTEXT

# ================================
# DEDICATED CDC CONFIGURATION
# ================================
#not using
cdc.kafka.topics=${CDC_TOPICS:mytestp.test.test}
# Single Topic Configuration (Create this topic in local Kafka)
cdc.enhanced.topic=local.public.delivery_building
cdc.enhanced.consumer.group-id=local-enhanced-cdc-consumer-group

# Consumer Configuration (1 Thread)
cdc.enhanced.consumer.batch-size=250
cdc.enhanced.consumer.poll-timeout-ms=1000

# Primary Key Hasher Configuration (2 Threads for local)
cdc.enhanced.hasher.thread-count=1
cdc.enhanced.hasher.queue-size=2500

# Worker Pool Configuration (4 Threads for local - reduced from 16)
cdc.enhanced.worker.thread-count=4
cdc.enhanced.worker.queue-size=1500
cdc.enhanced.worker.batch-size=25
cdc.enhanced.worker.batch-timeout-ms=1000

# ================================
# LOCAL DATABASE CONFIGURATION
# ================================

# Oracle Database Connection (Local Docker Container)
oracle.db.url=jdbc:oracle:thin:@localhost:1521/XE
oracle.db.username=SYSTEM
oracle.db.password=Oracle123
oracle.db.schema=SYSTEM

# Reduced Connection Pool Configuration for Local
cdc.enhanced.db.pool.initial-size=2
cdc.enhanced.db.pool.max-total=6
cdc.enhanced.db.pool.max-idle=4
cdc.enhanced.db.pool.min-idle=2
cdc.enhanced.db.pool.max-wait-millis=30000
cdc.enhanced.db.pool.validation-query=SELECT 1 FROM DUAL
cdc.enhanced.db.pool.test-on-borrow=true
cdc.enhanced.db.pool.test-while-idle=true

# ================================
# CDC TABLE CONFIGURATION
# ================================

# Table Configuration (Use local test tables)
cdc.topic.table-mappings={'local.public.delivery_building': 'DELIVERY_BUILDING'}
cdc.table.primary-keys={'DELIVERY_BUILDING': 'ID'}
cdc.tables.allow-duplicates=DELIVERYCONFIRM
cdc.handle.duplicates=merge

# ================================
# LOCAL POSTGRESQL SOURCE CONFIGURATION
# ================================
postgres.db.url=jdbc:postgresql://localhost:5432/psqldev
postgres.db.username=psqldev
postgres.db.password=We1c0me123
postgres.db.schema=public

# PostgreSQL UDT Configuration
postgres.udt.tables=HANDOFF_BATCHROUTE:BATCH_ID
postgres.udt.type-mapping={'handoff_routing_route_no':'HANDOFF_ROUTING_ROUTE_NO', 'handoff_roadnet_route_no':'HANDOFF_ROADNET_ROUTE_NO'}
postgres.udt.column-mapping={'HANDOFF_BATCHROUTE.ROUTING_ROUTE_NO':'handoff_routing_route_no', 'HANDOFF_BATCHROUTE.ROADNET_ROUTE_NO':'handoff_roadnet_route_no'}

# ================================
# MONITORING & HEALTH
# ================================
management.endpoints.web.exposure.include=health,metrics,info
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# ================================
# LOCAL LOGGING CONFIGURATION
# ================================
logging.level.com.zensar.data.replication.enhanced=DEBUG
logging.level.com.zensar.data.replication.enhanced.consumer=DEBUG
logging.level.com.zensar.data.replication.enhanced.pool=DEBUG
logging.level.com.zensar.data.replication.enhanced.worker=DEBUG
logging.level.com.zensar.data.replication.enhanced.service=DEBUG

# Keep existing service logging
logging.level.com.zensar.data.replication.service=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %cyan(%-50logger{50}) : %msg%n

# Additional debug logging for local testing
logging.level.org.apache.kafka=INFO
logging.level.org.springframework.kafka=INFO
logging.level.com.zaxxer.hikari=INFO

# ================================
# LOCAL PERFORMANCE TUNING
# ================================

# Reduced JVM settings for local development
# -Xms1g -Xmx2g
# -XX:+UseG1GC
# -XX:MaxGCPauseMillis=100
# -XX:+UseStringDeduplication
# -Djava.awt.headless=true

# ================================
# LOCAL TESTING CONFIGURATION
# ================================

# Enable Spring Boot DevTools for local development
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# H2 Console for debugging (if needed)
spring.h2.console.enabled=false

# ================================
# LOCAL ARCHITECTURE SUMMARY
# ================================
#
# Local Setup Instructions:
# 1. Run: docker-compose up -d
# 2. Wait for Oracle and PostgreSQL to be healthy
# 3. Create Oracle user 'dlv' and schema 'DLV'
# 4. Create PostgreSQL schema 'dlv'
# 5. Create Kafka topic: local.dlv.delivery_building
# 6. Start the application with profile: --spring.profiles.active=local
#
# Monitoring URLs:
# - Kafka UI: http://localhost:8094
# - Application Health: http://localhost:9095/actuator/health
# - Application Metrics: http://localhost:9095/actuator/metrics
# - Schema Registry: http://localhost:8081
# - Debezium: http://localhost:8083
#
# Database Connections:
# - Oracle: localhost:1521/XE (sys/Oracle123 as sysdba)
# - PostgreSQL: localhost:5432/psqldev (psqldev/We1c0me123)
#
# Local Architecture: 1 Consumer ? 2 Hashers ? 4 Workers ? 6 DB Connections
# Expected Local Throughput: 25k+ records/hour
# Optimized for local development with minimal resource usage
#
# ================================