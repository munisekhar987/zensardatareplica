# Enhanced CDC Consumer Application Configuration
# Architecture: Consumer(1) ? Hashers(4) ? Workers(16) ? Connection Pool

# Server Configuration
server.port=${SERVER_PORT:9095}
spring.application.name=${SPRING_APP_NAME:Enhanced-CDC-Architecture}

# CRITICAL: Keep application running continuously
spring.main.keep-alive=true
spring.main.web-application-type=servlet

# ================================
# DEDICATED KAFKA CONFIGURATION
# ================================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:bootstrap.transapp-rollback-poc.us-east4.managedkafka.pr-transapp-dev-use4-01.cloud.goog:9092}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Enhanced Kafka Consumer Configuration
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.listener.ack-mode=manual_immediate
spring.kafka.consumer.max-poll-records=${KAFKA_MAX_POLL_RECORDS:2000}
spring.kafka.consumer.session-timeout-ms=${KAFKA_SESSION_TIMEOUT:300000}
spring.kafka.consumer.heartbeat-interval-ms=${KAFKA_HEARTBEAT_INTERVAL:10000}
spring.kafka.consumer.fetch-min-size=${KAFKA_FETCH_MIN_SIZE:1024}
spring.kafka.consumer.fetch-max-wait=${KAFKA_FETCH_MAX_WAIT:1000}

# Google Cloud Managed Kafka Security
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="sa-poc-kafka-user@pr-transapp-dev-use4-01.iam.gserviceaccount.com" password="ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAicHItdHJhbnNhcHAtZGV2LXVzZTQtMDEiLAogICJwcml2YXRlX2tleV9pZCI6ICIxZmQ1YjM1ZGQzOGVjMmNlMGUzY2Q4MTU1ZWUzYTZlNzYxZTlkMTYyIiwKICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUURDWndWVFg2VE52SzNyXG4yRnBhRmJNRjllYXFPOGVVN2NTS01QdDZ5eDFhendaWmFjVDdxZFFJenBVOFZGK2xoaWovSkVxdmMzcWVmdHBxXG5kRTQzbEYvL25HZ0NTekRzTWRScEFGSlVwUFB2VlIwUjJUSnduV3dZNytLZ2trSlVjSGQ2L2NxSUVkU2U4c0tuXG43RmZIQm81S0E4bFpBYUI0VDZUOUJVSm1DSmltSWhBSk1tOENEb2M2Tmh0amgwSTJWYzd6bjRISlovMDlrRE9xXG5EQkduZm9SRERkbW5EY0V1QlJjVUN1VEc0SXlIRzNkRjh4eXN1STdqNXZPazdTZDgrMXVrRnhhUkl3YXVJSytnXG4vVTRZVnBhUW9XQTduWU5mZHV6a2tkcHU3RVhwYmhhSkdKUmQ3dlBJMFBJSm4wUk9OYmdFWVNWTk9ud2Nyd3FGXG4xYnJrN01zckFnTUJBQUVDZ2dFQU1CTEcwOS9HZ3VRQ1JGekx0eFEvb1owMkRlbmJpSDRseUtDbFI2L2IwZjE1XG5EZnBrYm5HSVVDYzU2MkhZQnpnK2doMm81R3RUcXNjbTN3Vms1RVNxV3EwRVlYRFRwODBJd0hDR2E0MGhENUhHXG5Md2c5ZTNIS2J2NC9Wa0xrNlRtb3FqOEJheFd4dFI3R09UMXVWWGJQRUFtUXJKU0U2TXVWT3NhbXJWRzU0ZmNDXG5YQW1tSWswNTR4aEczbnNUYjg3Ry80OTROWEUyaFFrcTE1L050dlhNaUhYV1lVUEtWakdKdGtYOW8raENFYTY1XG5WT0xSYWc1d3VlTWlKRXpVajVtNmJhemZySXRZOE9NbXAxMEtLZlBxcXlQbDBseGpjbzZSOGdFZnNPSFYxNGxjXG56VFRsQXVxMDZ3cy9YZzhXdXY5NnY5STFzZmlQekFua2lXdEpWQmZRY1FLQmdRRDZVYzRsNFRxVytOdG12VFJHXG41cTNsRThMUXFiQ1JWSHJWSDBKMjlYRmVadDZVNXlzZ0hTY05ySzgrVE1qbWVaVTFEODRoK21QT3VnSUlTVGRrXG5LQmUrUmlROGlBV3NPWVpCZ2F2SlhLdVZ3MlJTenJKU0diNzlBTGQvWmNtMVV1MERpNUlBT1g3NlN3TWRpN1paXG5UQ25ZVEhyTUR4NGJNRWpDN1EzckdkYTk4UUtCZ1FERzBGK0pST3FXVUtCb0d3RE51YkVrUG1VQUZ4UEdNbjQzXG4wanNxUzBJQWVYWDdnbGxIdXlyYTFQTEgrV2NrbnNuMzhicWlqbUdndjNSRzFhNG14dmpjTElhU1ZKS0xpY3JVXG5NRlh3NDZtYWJ4bXppSk1ObHZrNDhpdktHeWh5QUM5YS92UEFEUGdEY21tU3luZHJFTndlU0RiQ01ITjNZa3A4XG5OWE1IcW9jdTJ3S0JnUUNxZWZZVWRDeXJ6dlhWSlh3cDRVYUM0WTltL25vQ3IrOHJvQ3RxeXNPWDBDVThjYWM4XG5LcjZESUowRXA5U1dxaTBFd3l2V2xpbE5DLzhBVjZUQ3NFOWpSVysrVGNEWFJ5SDVFTy9HcGpjeE9xM2plMk9VXG5hSFphNWhjU1MyY3c5elgxbVNNb3hmK0ZSSHJ0cjAzVHlQd2lsQXQ1Vjc1Z00rVUo0OW43eUZBb2NRS0JnUUNEXG56R05wSnF5MVZXSGhZZlZZYkgrSVhXeXJjS0VGUlRmelhZVW5kcGljbytpWkFVS2FrUFBKK2wyd1FDQW1ZTFhYXG5qd0tBL1E2dmQveG5jUVJ3Wkh0WnlwS3pzeWtySS8rNFJ3clNGTHE4ekdZblpLVEgzNHY4T2w3WkxzUFRQMWdsXG5aTnJHT0ZLNlJrREN0VUlSVWkzNlRUa3Y1dHJGQy80QTlaWDZRUXc0L1FLQmdCNjJiY2JaSkZxdy9veHNWOE9CXG5tMlZrLysvRlJTUUZFQ3BSaW81NUJpOHovbW94MnkzQm5kQlNNK3A4K3F5ejlJQS9WMEozM1I1M0QwQWNka2xUXG45MEtBVXNzWWo5MjJ1M3AvbmN6YVVYaVFuT0ZqamJha3dQc3NsNE9Ba2pQcmd1OVltSXBOd3REbVFUUStHRG5ZXG45b2QrcEMwT0pJcktWVmZKaTREalJ3b2Jcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgImNsaWVudF9lbWFpbCI6ICJzYS1wb2Mta2Fma2EtdXNlckBwci10cmFuc2FwcC1kZXYtdXNlNC0wMS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgImNsaWVudF9pZCI6ICIxMTQ5NzMxODcwODgwNjM0NjkwMTQiLAogICJhdXRoX3VyaSI6ICJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aCIsCiAgInRva2VuX3VyaSI6ICJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsCiAgImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvY2VydHMiLAogICJjbGllbnRfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9yb2JvdC92MS9tZXRhZGF0YS94NTA5L3NhLXBvYy1rYWZrYS11c2VyJTQwcHItdHJhbnNhcHAtZGV2LXVzZTQtMDEuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJ1bml2ZXJzZV9kb21haW4iOiAiZ29vZ2xlYXBpcy5jb20iCn0K";

# ================================
# DEDICATED CDC CONFIGURATION
# ================================

# Single Topic Configuration (Assign only ONE topic to this consumer)
cdc.enhanced.topic=${CDC_ENHANCED_TOPIC:mytestp.dlv.delivery_building}
cdc.enhanced.consumer.group-id=${CDC_ENHANCED_GROUP_ID:enhanced-cdc-consumer-group}

# Consumer Configuration (1 Thread)
cdc.enhanced.consumer.batch-size=${CDC_ENHANCED_BATCH_SIZE:2000}
cdc.enhanced.consumer.poll-timeout-ms=${CDC_ENHANCED_POLL_TIMEOUT:1000}

# Primary Key Hasher Configuration (4 Threads)
cdc.enhanced.hasher.queue-size=${CDC_ENHANCED_HASHER_QUEUE:10000}

# Worker Pool Configuration (16 Threads)
cdc.enhanced.worker.queue-size=${CDC_ENHANCED_WORKER_QUEUE:5000}
cdc.enhanced.worker.batch-size=${CDC_ENHANCED_WORKER_BATCH:100}
cdc.enhanced.worker.batch-timeout-ms=${CDC_ENHANCED_WORKER_TIMEOUT:1000}

# ================================
# DATABASE CONFIGURATION
# ================================

# Oracle Database Connection
oracle.db.url=${ORACLE_URL:jdbc:oracle:thin:@10.64.45.111:1521/devint}
oracle.db.username=${ORACLE_USER:dlv}
oracle.db.password=${ORACLE_PASSWORD:dlv}
oracle.db.schema=${ORACLE_SCHEMA:DLV}

# Enhanced Connection Pool Configuration (Shared by 16 Workers)
cdc.enhanced.db.pool.initial-size=${CDC_DB_POOL_INITIAL:15}
cdc.enhanced.db.pool.max-total=${CDC_DB_POOL_MAX:50}
cdc.enhanced.db.pool.max-idle=${CDC_DB_POOL_MAX_IDLE:25}
cdc.enhanced.db.pool.min-idle=${CDC_DB_POOL_MIN_IDLE:10}
cdc.enhanced.db.pool.max-wait-millis=${CDC_DB_POOL_WAIT:30000}
cdc.enhanced.db.pool.validation-query=${CDC_DB_POOL_VALIDATION:SELECT 1 FROM DUAL}
cdc.enhanced.db.pool.test-on-borrow=${CDC_DB_POOL_TEST_BORROW:true}
cdc.enhanced.db.pool.test-while-idle=${CDC_DB_POOL_TEST_IDLE:true}

# ================================
# CDC TABLE CONFIGURATION
# ================================

# Table Configuration (Use your existing configuration)
cdc.topic.table-mappings=${CDC_TOPIC_TABLE_MAPPINGS:{'mytestp.dlv.delivery_building': 'DELIVERY_BUILDING'}}
cdc.table.primary-keys=${CDC_TABLE_PRIMARY_KEYS:{'DELIVERY_BUILDING': 'ID'}}
cdc.tables.allow-duplicates=${CDC_ALLOW_DUPLICATES:DELIVERYCONFIRM}
cdc.handle.duplicates=${CDC_DUPLICATE_STRATEGY:merge}

# ================================
# POSTGRESQL SOURCE CONFIGURATION
# ================================
postgres.db.url=${POSTGRES_URL:jdbc:postgresql://10.52.3.6:5432/psqldev}
postgres.db.username=${POSTGRES_USER:psqldev}
postgres.db.password=${POSTGRES_PASSWORD:We1c0me123}
postgres.db.schema=${POSTGRES_SCHEMA:dlv}

# PostgreSQL UDT Configuration
postgres.udt.tables=${POSTGRES_UDT_TABLES:HANDOFF_BATCHROUTE:BATCH_ID}
postgres.udt.type-mapping=${POSTGRES_UDT_TYPE_MAPPING:{'handoff_routing_route_no':'HANDOFF_ROUTING_ROUTE_NO', 'handoff_roadnet_route_no':'HANDOFF_ROADNET_ROUTE_NO'}}
postgres.udt.column-mapping=${POSTGRES_UDT_COLUMN_MAPPING:{'HANDOFF_BATCHROUTE.ROUTING_ROUTE_NO':'handoff_routing_route_no', 'HANDOFF_BATCHROUTE.ROADNET_ROUTE_NO':'handoff_roadnet_route_no'}}

# ================================
# MONITORING & HEALTH
# ================================
management.endpoints.web.exposure.include=health,metrics,info
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# ================================
# LOGGING CONFIGURATION
# ================================
logging.level.com.zensar.data.replication.enhanced=INFO
logging.level.com.zensar.data.replication.enhanced.consumer=DEBUG
logging.level.com.zensar.data.replication.enhanced.pool=INFO
logging.level.com.zensar.data.replication.enhanced.worker=INFO
logging.level.com.zensar.data.replication.enhanced.service=DEBUG

# Keep existing service logging
logging.level.com.zensar.data.replication.service=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %cyan(%-50logger{50}) : %msg%n

# ================================
# PERFORMANCE TUNING
# ================================

# JVM Optimization Flags (Add to startup)
# -Xms4g -Xmx8g
# -XX:+UseG1GC
# -XX:MaxGCPauseMillis=100
# -XX:+UseStringDeduplication
# -XX:+UseCompressedOops
# -Djava.awt.headless=true

# ================================
# ARCHITECTURE SUMMARY
# ================================
#
# Flow: DedicatedCdcConsumer(1) ? PrimaryKeyHasherService(4) ? WorkerPoolService(16) ? Connection Pool(50)
#
# DedicatedCdcConsumer:
# - Consumes from single topic with dedicated consumer group
# - Batches 2000 events at a time
# - Only commits offsets on successful processing
#
# PrimaryKeyHasherService:
# - 4 hasher threads distribute events to 16 partitions
# - Same primary key always goes to same partition
# - Ensures ordering within same primary key
#
# WorkerPoolService:
# - 16 worker threads (one per partition)
# - Each worker creates SQL statements using existing SqlExecutionService logic
# - Workers batch 100 statements and execute on connection pool
# - Workers cannot send next batch until previous batch completes
# - Uses @Transactional for consistency
#
# SQL Statement Generation:
# - Uses exact same logic as existing SqlExecutionService
# - Handles primary keys, duplicates, UDTs, all existing business rules
# - Generates MERGE statements for INSERT with duplicate handling
# - Supports tables with and without primary keys
#
# Connection Pool:
# - Shared pool of 50 connections
# - Optimized for Oracle with prepared statement caching
# - Proper connection validation and error handling
#
# Expected Throughput: 500k+ records/hour (3x improvement from 170k)
#
# Monitoring Endpoints:
# - /actuator/health - Overall system health
# - /actuator/metrics - Performance metrics
# - Custom metrics for each component
#
# ================================