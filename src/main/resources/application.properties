# CDC Consumer Application Configuration

# Server Configuration
server.port=9095
spring.application.name=CDC-DataReplicationAPP

# Kafka Configuration (using standard Spring Kafka properties)
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=multi-cdc-consumer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# CDC Topic Configuration
# Comma-separated list of Kafka topics to consume from
cdc.kafka.topics=mypg.public.handoff_batchstop,mypg.public.customer,mypg.public.product,mypg.public.order

# Topic to Table Mappings Configuration
# Format: Topic name -> Table name
cdc.topic.table-mappings={'mypg.public.handoff_batchstop': 'HANDOFF_BATCHSTOP', 'mypg.public.customer': 'CUSTOMER', 'mypg.public.product': 'PRODUCT', 'mypg.public.order': 'ORDER'}

# Primary Key Configuration for Tables
# Format: Table name -> comma-separated list of primary key column names
cdc.table.primary-keys={'HANDOFF_BATCHSTOP': 'BATCH_ID,WEBORDER_ID', 'CUSTOMER': 'CUSTOMER_ID', 'PRODUCT': 'PRODUCT_ID', 'ORDER': 'ORDER_ID'}

# Duplicate Handling Strategy
# Options: merge, upsert, ignore, none
# merge - Uses Oracle's MERGE statement to handle duplicates (recommended)
# upsert - Try update first, if not exists then insert
# ignore - Check if record exists first, only insert if not found
# none - Standard insert (will fail on duplicates)
cdc.handle.duplicates=merge

# Oracle Database Connection Configuration
oracle.db.url=jdbc:oracle:thin:@localhost:1521/XEPDB1
oracle.db.username=system
oracle.db.password=admin
oracle.db.schema=SYSTEM

# Logging Configuration
logging.level.com.cdc.poc=INFO
logging.level.com.cdc.poc.consumer=DEBUG
logging.level.com.cdc.poc.service=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %cyan(%-40logger{40}) : %msg%n